#include <WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ArduinoJson.h>

#define DHTPIN 4
#define DHTTYPE DHT22
#define MQ135_PIN 32
#define LDR_PIN 33

// Wi-Fi credentials
const char* WIFI_SSID = "SLT_FIBER_X4YcU";
const char* WIFI_PASS = "P772nTZC";

// MQTT broker
const char* MQTT_SERVER = "broker.hivemq.com";
const int MQTT_PORT = 1883;

WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

// LCD setup (16x2 I2C)
LiquidCrystal_I2C lcd(0x27, 16, 2);

String deviceId;
String topicSensor;
String topicDisplay;

// ---------------- Scrolling Quote ----------------
String currentQuote = "";
unsigned long lastScrollTime = 0;
int scrollPos = 0;
const unsigned long scrollInterval = 300; // ms between scroll steps

// ---------------- Wi-Fi Connection ----------------
void connectWiFi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi Connected!");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WiFi Connected");
  lcd.setCursor(0, 1);
  lcd.print(WiFi.localIP().toString());
  delay(2000);
}

// ---------------- MQTT Connection ----------------
void connectMQTT() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    String clientId = "ESP32-" + deviceId;
    if (client.connect(clientId.c_str())) {
      Serial.println(" Connected!");
      client.subscribe(topicDisplay.c_str());
      Serial.print("üì© Subscribed to: ");
      Serial.println(topicDisplay);
    } else {
      Serial.print(" failed, rc=");
      Serial.print(client.state());
      Serial.println(" retrying...");
      delay(2000);
    }
  }
}

// ---------------- MQTT Message Callback ----------------
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (unsigned int i = 0; i < length; i++) message += (char)payload[i];
  Serial.print("\nüì• Received from topic: ");
  Serial.println(topic);
  Serial.print("Payload: ");
  Serial.println(message);

  StaticJsonDocument<512> doc;
  DeserializationError err = deserializeJson(doc, message);
  if (err) {
    Serial.println("‚ö†Ô∏è JSON parse failed!");
    return;
  }

  if (doc.containsKey("quote")) {
    currentQuote = doc["quote"].as<String>();
    scrollPos = 0; // reset scroll position
    lastScrollTime = millis();
    Serial.print("üí¨ New Quote: ");
    Serial.println(currentQuote);
  }
}

// ---------------- Send Sensor Data ----------------
void sendSensorData() {
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  int mq135Value = analogRead(MQ135_PIN);
  int ldrValue = analogRead(LDR_PIN);

  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("‚ö†Ô∏è Failed to read DHT22!");
    lcd.clear();
    lcd.print("DHT22 Error!");
    return;
  }

  float co2ppm = map(mq135Value, 0, 4095, 400, 2000);
  float lightPercent = map(ldrValue, 0, 4095, 0, 100);

  // Print on Serial
  Serial.println("üìä Sensor Readings --------------------");
  Serial.printf("Temp: %.1f¬∞C | Hum: %.1f%%\n", temperature, humidity);
  Serial.printf("CO‚ÇÇ: %.0f ppm | Light: %.0f%%\n", co2ppm, lightPercent);
  Serial.println("---------------------------------------");

  // Show readings on LCD (top row)
  lcd.setCursor(0, 0);
  lcd.print("T:");
  lcd.print(temperature, 1);
  lcd.print("C H:");
  lcd.print(humidity, 0);
  lcd.print("%   "); // clear remaining chars

  lcd.setCursor(0, 1);
  lcd.print("CO2:");
  lcd.print(co2ppm, 0);
  lcd.print(" L:");
  lcd.print(lightPercent, 0);
  lcd.print("%   "); // clear remaining chars

  // --- CSV Payload for Python backend ---
  String payload = String(temperature) + "," + String(humidity) + "," + String(co2ppm) + "," + String(lightPercent);
  if (client.publish(topicSensor.c_str(), payload.c_str())) {
    Serial.println("üì§ Sent Sensor Data to MQTT (CSV): " + payload);
  } else {
    Serial.println("‚ùå MQTT Publish failed!");
  }
}

// ---------------- Display Scrolling Quote ----------------
void displayScrollingQuote() {
  if (currentQuote.length() <= 16) return; // no scroll needed
  if (millis() - lastScrollTime >= scrollInterval) {
    lastScrollTime = millis();
    String displayText = currentQuote.substring(scrollPos, scrollPos + 16);
    lcd.setCursor(0, 1);
    lcd.print(displayText);
    scrollPos++;
    if (scrollPos + 16 > currentQuote.length()) scrollPos = 0; // loop
  }
}

// ---------------- Setup ----------------
void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22);  // SDA=21, SCL=22 for ESP32
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");

  dht.begin();
  delay(2000);

  connectWiFi();

  deviceId = WiFi.macAddress();
  deviceId.replace(":", "");
  topicSensor = "auralink/sensor";
  topicDisplay = "auradev/" + deviceId + "/display";

  client.setServer(MQTT_SERVER, MQTT_PORT);
  client.setCallback(mqttCallback);

  lcd.clear();
  lcd.print("System Ready");
  delay(1000);
}

// ---------------- Loop ----------------
void loop() {
  if (WiFi.status() != WL_CONNECTED) connectWiFi();
  if (!client.connected()) connectMQTT();
  client.loop();

  static unsigned long lastSend = 0;
  if (millis() - lastSend > 10000) { // every 10 seconds
    lastSend = millis();
    sendSensorData();
  }

  displayScrollingQuote();
}
